#!/usr/bin/env python3

import sys
from math import *

import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus

from geometry_msgs.msg import Point, PoseStamped

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

from std_msgs.msg import Bool, UInt8, String

from sensor_msgs.msg import BatteryState

from nav_msgs.msg import Path

#importing librasry for interfacing breadcrumb (now required.)
from breadcrumb.srv import RequestPath
from breadcrumb.srv import RequestPathRequest



# This is getting a bit more complicated now, so we'll put our information in
# a class to keep track of all of our variables. This is not so much different
# to the previous methods, other than the fact that the class will operate
# within itself.
# i.e. it will have it's own publishers, subscribers, etc., that
# will call it's own functions as callbacks, etc.
class Guidance():
	def __init__(self, waypoints):
		# Make sure we have a valid waypoint list
		# Set Boundaries
		self.safeRangeX = rospy.get_param("~safeRangeX", 2)
		self.safeRangeY = rospy.get_param("~safeRangeY", 2)
		self.safeRangeZ = rospy.get_param("~safeRangeZ", 2)
		if not self.check_waypoints(waypoints):
			# raise ArgumentError("Invalid waypoint list input!")
			rospy.logerr("wp is oob!")


		#landing waypoint for the drone to return to.
		self.landing_waypoint = [-1, -1, 2, 0]
		#battery state
		self.voltage = 12.6 #100%
		self.current = 0
		self.land_refresh = True
		# Internal counter to see what waypoint were are up to
		self.waypoint_counter = 0

		#flag for only triggering ROI once.
		self.donot_int_for_person = False
		self.donot_int_for_bag = False
		# Set a flag to indicate that we are doing a specific inspection
		# and that we are not following our waypoint list
		# This will stop our "waypoint is reached" callback from firing
		# during the roi diversion and taking over our flight!
		self.performing_roi = False

		#append landing waypoint to the waypoints list.
		waypoints.append(self.landing_waypoint)
		
		# Save the input waypoints
		self.waypoints = waypoints
		self.display_path(waypoints,"/guidance/fullPath")

		# Make some space to record down our current location
		self.current_location = Point()
		# Set our linear and rotational velocities for the flight
		self.vel_linear = rospy.get_param("~vel_linear", 1)
		self.vel_yaw = rospy.get_param("~vel_yaw", 0.2)
		# Set our position and yaw waypoint accuracies
		self.accuracy_pos = rospy.get_param("~acc_pos", 0.3)
		self.accuracy_yaw = rospy.get_param("~acc_yaw", 0.3)

		# self.survey_height = rospy.get_param("~survey_height", 3)


		# Create our action client
		action_ns = rospy.get_param("~action_topic", 'spar/flight')
		self.spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
		rospy.loginfo("Waiting for spar...")
		self.spar_client.wait_for_server()

		#publisher to command payload subsystems
		self.pub_payload = rospy.Publisher('payloadcommands', UInt8, queue_size=2)

		# Wait to connect with Breadcrumb (MUST HABVE BREADCRUMB.LAUNCH RUNNING OTHERWISE IT BOLD:/STUCKS/!! !TEEMO!)
		# Code will error if you try to connect to a service
		# that does not exist
		rospy.wait_for_service('/breadcrumb/request_path')
		self.srvc_bc = rospy.ServiceProxy('/breadcrumb/request_path', RequestPath)


		if not rospy.is_shutdown():
			# Good to go, start mission
			rospy.loginfo("Starting mission")

			# Setup first waypoint segment
			# XXX:	Another option would be to do "takeoff" and leave "waypoint_counter = 0" to
			#		begin the mission at the first waypoint after take-off

			#takeoff here
			# self.send_takeoff()


			self.send_wp(self.waypoints[0])
			self.waypoint_counter += 1
			# Initialisation breadcrumb waypoints
			self.breadcrumbWPSnextIndex = 0
			self.breadcrumbMode = False
			self.breadcrumbWPS = []

			# Setup a timer to check if our waypoint has completed at 20Hz
			self.timer = rospy.Timer( rospy.Duration(1.0/20.0), self.check_waypoint_status )
			# Callback to save "current location" such that we can perform and return
			# from a diversion to the correct location
			# XXX: These topics could be hard-coded to avoid using a launch file
			self.voltage_monitoring = rospy.Subscriber("~battery", BatteryState, self.callback_voltagemonitor)
			rospy.loginfo("subbed to battery ")

			# subscribe to landing site confirmation signal
			self.sub_aruco = rospy.Subscriber("landing_site", Bool, self.callback_land)
			rospy.loginfo("subbed to land")

			self.current_target_name = String()
			self.sub_target_name = rospy.Subscriber("/depthai_node/detection/target_coord", String, self.callback_target_name)
			

			
			# self.sub_pose = rospy.Subscriber("/mavros/local_position/pose", PoseStamped, self.callback_pose)
			
			self.sub_pose = rospy.Subscriber("~pose", PoseStamped, self.callback_pose)

			# Subscriber to catch "ROI" diversion commands
			self.sub_roi = rospy.Subscriber("~roi", PoseStamped, self.callback_inspect_roi)

			self.sub_landing = rospy.Subscriber("targetArUco", PoseStamped, self.callback_inspect_landing)



			# XXX: Could have a publisher to output our waypoint progress
			# throughout the flight (should publish each time the waypoint
			# counter is increased). Note: will also need to import "Float32"
			# from "std_msgs.msg" in the header
			# self.pub_progress = rospy.Subscriber("~waypoint_progress", Float32, 10)

			# If shutdown is issued (eg. CTRL+C), cancel current
	 		# mission before rospy is shutdown.
			rospy.on_shutdown( lambda : self.shutdown() )

	# This function will check if a list of waypoints is in the format we expect
	def callback_target_name(self, msg_in):	
		if msg_in.data != '':
			msg = msg_in.data.split('-')
			if msg[0] != '1':
				self.current_target_name = msg[0]

				
	def check_waypoints(self, wps):
		# Make sure waypoints are a list
		if not isinstance(wps, list):
			rospy.logwarn("Waypoints are not list")
			return False

		# Make sure we have at least one waypoint
		if len(wps) < 1:
			rospy.logwarn("Waypoints list is empty")
			return False

		# Check each of our waypoints
		for i in range(len(wps)):
			if not self.check_waypoint(wps[i]):
				rospy.logwarn("Waypoint %i did not pass check" % (i + 1))
				return False

		# If we haven't returned false yet, then waypoints look good!
		return True

	def check_waypoint(self, wp):
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False
		
		# Check if the waypoint is inside the net 
		if abs(wp[0]) > self.safeRangeX or abs(wp[1]) > self.safeRangeY or abs(wp[2]) > self.safeRangeZ:
			rospy.logwarn("Waypoint has an invalid size for O134 (must be -{}<X<{}/-{}<Y<{}/Z<{}/Yaw)".format(self.safeRangeX,self.safeRangeX, self.safeRangeY, self.safeRangeY, self.safeRangeZ, self.safeRangeZ))
			return False

		# If we haven't returned false yet, then waypoint looks valid!
		return True
	# This function will check if a waypoint is in the format we expect
	def old_check_waypoint(self, wp):
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False

		# If we haven't returned false yet, then waypoint looks valid!
		return True


	# This function will make sure we shut down the node as safely as possible
	def shutdown(self):
		# Unregister anything that needs it here
		self.sub_aruco.unregister()
		self.sub_pose.unregister()
		self.sub_roi.unregister()
		self.voltage_monitoring.unregister()
		self.spar_client.cancel_goal()

		rospy.loginfo("Guidance stopped")
	# This function monitors the voltage of the battery
	def callback_voltagemonitor(self, msg_in):
		self.voltage = msg_in.voltage
		self.current = msg_in.current
		#rospy.loginfo("the current voltage of the battery is " + str(voltage))

		#this is to land to the landing location as an roi
		if self.voltage < 9.5:
			self.performing_roi = True
			rospy.logwarn("Low battery, return to landing point ...")
			self.spar_client.cancel_goal()
				
			self.send_wp(self.waypoints[-1])
			self.spar_client.wait_for_result()
			if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
				# Something went wrong, cancel out of guidance!
				rospy.signal_shutdown("cancelled")
				return
			self.send_land()
			
	
	
	# This function will check receive the current pose of the UAV constantly
	def callback_land(self, msg_in):
		pass
		# # Store current position so it can be accessed later, it then set the land refresh changes flag to false.
		# if msg_in.data and self.land_refresh:
		# 	self.landing_waypoint = [self.current_location.x, self.current_location.y, self.current_location.z, 0.0]
		# 	rospy.logfatal("Aruco marker detected, the goofy ahh drone's landing position will be " + str(self.landing_waypoint))
		# 	self.waypoints[-1] = self.landing_waypoint
		# 	self.land_refresh = False


	# This function will check receive the current pose of the UAV constantly
	def callback_pose(self, msg_in):
		# Store the current position at all times so it can be accessed later
		self.current_location = msg_in.pose.position
		#rospy.loginfo("my current location is" + str([self.current_location.x, self.current_location.y, self.current_location.z, 0.0]))

	def command_payload(self,command):
			# payload commands message structure:
			#both close:   0b00000000 (0)
			#both open:    0b00000011 (3)
			#tracker open: 0b00000010 (2)
			#epi open:     0b00000001 (1)
		self.pub_payload.publish(command)
	


	# This function will fire whenever a ROI pose message is sent
	# It is also responsible for handling the ROI "inspection task"
	def callback_inspect_roi(self, msg_in):
		if self.waypoint_counter >= 2 and ((self.donot_int_for_person == False) or (self.donot_int_for_bag == False)): 
			# Set our flag that we are performing the diversion
			dwp = [msg_in.pose.position.x, msg_in.pose.position.y, 1, 0.0]
			if self.check_waypoint(dwp) == False:
				rospy.logwarn("The bounding box is exceeded, cancelling.")
				return
			dropping_to = self.current_target_name
			if dropping_to == "Person" and self.donot_int_for_person:
				# rospy.logwarn("The Person has already been given a payload, cancelling")
				return
			if dropping_to == "Bag" and self.donot_int_for_bag:
				# rospy.logwarn("The Bag has already been given a payload, cancelling")
				return
			self.performing_roi = True

			rospy.loginfo("Starting diversion to ROI...")
			# Cancel the current goal (if there is one)
			self.spar_client.cancel_goal()
			# Record our current location so we can return to it later
			start_location = self.current_location
			# XXX:	It would also be a good idea to capture "current yaw" from
			#		the pose to maintain that throughout a diversion

			# Set the "diversion waypoint" (at yaw zero)
			# Set the "return waypoint" (at yaw zero)
			rwp = [self.current_location.x, self.current_location.y, self.current_location.z, 0.0]

			# XXX: Could pause here for a moment with ( "rospy.sleep(...)" ) to make sure the UAV stops correctly

			rospy.loginfo(f"the location of the target {dropping_to} is {msg_in.pose.position.x}, {msg_in.pose.position.y}")
			self.send_wp(dwp)
			self.spar_client.wait_for_result()
			if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
				# Something went wrong, cancel out of guidance!
				rospy.signal_shutdown("cancelled")
				return

			rospy.loginfo("Reached diversion ROI!")
			# XXX: Do something? drop yo mama????
			rospy.sleep(rospy.Duration(3))

			rospy.loginfo(f"dropping payload to {dropping_to} NOW")

			if dropping_to== "Person" and (self.donot_int_for_person == False):
			# Stop target roi after first iteration (bandaid for now so we don't get multiple interrupts)
				self.donot_int_for_person = True
				self.command_payload(command=1)
			
			
			if dropping_to == "Bag" and (self.donot_int_for_bag == False):
				self.command_payload(command=2)
				self.donot_int_for_bag = True

			rospy.sleep(rospy.Duration(3))


			rospy.loginfo("Returning to flight plan...")

			self.send_wp(rwp)
			self.spar_client.wait_for_result()
			if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
				# Something went wrong, cancel out of guidance!
				rospy.signal_shutdown("cancelled")
				return

			# "waypoint_counter" represents the "next waypoint"
			# "waypoint_counter - 1" represents the "current waypoint"
			rospy.loginfo("Resuming flight plan from waypoint %i!" % (self.waypoint_counter - 1))
			self.send_wp(self.waypoints[self.waypoint_counter - 1])
			# Unset our flag that we are performing a diversion
			# to allow the waypoint timer to take back over
			self.performing_roi = False


	def callback_inspect_landing(self, msg_in):
		# Set our flag that we are performing the diversion
		dwp = [msg_in.pose.position.x, msg_in.pose.position.y, 1, 0.0]
		if self.check_waypoint(dwp) == False:
			pass

		else:
			if self.land_refresh:
				self.landing_waypoint = dwp
				rospy.loginfo("Aruco marker detected, the goofy ahh drone's landing position will be " + str(self.landing_waypoint))
				self.waypoints[-1] = self.landing_waypoint
				self.land_refresh = False
				

	# This function is for convinience to simply send out a new waypoint
	def send_wp(self, wp):
		# Make sure the waypoint is valid before continuing
		if not self.check_waypoint(wp):
			rospy.logerr("Invalid waypoint input!")

		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_GOTO
		goal.position.x = wp[0]
		goal.position.y = wp[1]
		goal.position.z = wp[2]
		goal.yaw = wp[3]
		goal.velocity_vertical = self.vel_linear
		goal.velocity_horizontal = self.vel_linear
		goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.accuracy_pos
		goal.yaw_range = self.accuracy_yaw

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.send_goal(goal)
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())


	def send_land(self):
		# Create our goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_LAND
		goal.velocity_vertical = rospy.get_param("~speed", 0.2)		# Other velocity information is ignored
		# No other information is used

		# Send the goal
		rospy.loginfo("Sending goal motion...")
		self.spar_client.send_goal(goal)
		# # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())
		# Wait for the result of the goal
		self.spar_client.wait_for_result()

		# Output some feedback for our flight
		result = self.spar_client.get_state()
		if result == GoalStatus.SUCCEEDED:
			rospy.loginfo("Landing complete!")
		else:
			rospy.logerr("Landing failed!")

			# Detailed Feedback
			if result != GoalStatus.SUCCEEDED:
				if(result == GoalStatus.PENDING) or (result == GoalStatus.ACTIVE):
					rospy.loginfo("Sent command to cancel current mission")
				elif(result == GoalStatus.PREEMPTED):
					rospy.logwarn("The current mission was cancelled")
				elif(result == GoalStatus.ABORTED):
					rospy.logwarn("The current mission was aborted")
				elif(result == GoalStatus.RECALLED):
					rospy.logerr("Error: The current mission was recalled")
				elif(result == GoalStatus.REJECTED):
					rospy.logerr("Error: The current mission was rejected")
				else:
					rospy.logerr("Error: An unknown goal status was recieved")

	def send_takeoff(self):
		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_TAKEOFF
		goal.position.z = rospy.get_param("~height", 1.0)			# Other position information is ignored
		goal.velocity_vertical = rospy.get_param("~speed", 1.0)		# Other velocity information is ignored
		goal.wait_for_convergence = True							# Wait for our takeoff "waypoint" to be reached
		goal.position_radius = rospy.get_param("~position_radius", 0.1)
		goal.yaw_range = rospy.get_param("~yaw_range", 0.1)

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.cancel_goal()
		self.spar_client.send_goal(goal)
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())
		# Wait for the result of the goal
		self.spar_client.wait_for_result()

		# Output some feedback for our flight
		result = self.spar_client.get_state()
		if result == GoalStatus.SUCCEEDED:
			rospy.loginfo("Take-off complete!")
		else:
			rospy.logerr(result)
			rospy.logerr("Take-off failed!")

			# Detailed Feedback
			if result != GoalStatus.SUCCEEDED:
				if(result == GoalStatus.PENDING) or (result == GoalStatus.ACTIVE):
					rospy.loginfo("Sent command to cancel current mission")
				elif(result == GoalStatus.PREEMPTED):
					rospy.logwarn("The current mission was cancelled")
				elif(result == GoalStatus.ABORTED):
					rospy.logwarn("The current mission was aborted")
				elif(result == GoalStatus.RECALLED):
					rospy.logerr("Error: The current mission was recalled")
				elif(result == GoalStatus.REJECTED):
					rospy.logerr("Error: The current mission was rejected")
				else:
					rospy.logerr("Error: An unknown goal status was recieved")



	# This function will fire whenever we recieve a timer event (te) from rospy.Timer()
	# The main purpose is to check if a waypoint has been reached,
	# and if so, send out the next waypoint to continue the mission
	def check_waypoint_status(self, te):
		# If we're performing the ROI diversion, then don't do
		# anything here, as this is handled in that function
		if not self.performing_roi:
			# If the last segment has succeeded.
			# For more complex tasks, it might be necessary to also
			# check if you are in waypoint or diversion mode here.
			# Hint: really, we should check for other status states
			#		(such as aborted), as there are some states
			#		where we won't recover from, and should just exit
			if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				rospy.loginfo(f"Reached waypoint {self.waypoint_counter} and battery voltage is {self.voltage}v")
				
				if self.waypoint_counter < (len(self.waypoints)):

					if not self.breadcrumbMode:
						req = RequestPathRequest()
						req.start.x = self.waypoints[self.waypoint_counter-1][0]
						req.start.y = self.waypoints[self.waypoint_counter-1][1]
						req.start.z = self.waypoints[self.waypoint_counter-1][2]
						req.end.x = self.waypoints[self.waypoint_counter][0]
						req.end.y = self.waypoints[self.waypoint_counter][1]
						req.end.z = self.waypoints[self.waypoint_counter][2]

						res = self.srvc_bc(req)
						# Breadcrumb will return a vector of poses if a solution was found
						# If no solution was found (i.e. no solution, or request bad
						# start/end), then breadcrumb returns and empty vector
						# XXX: You could also use res.path_sparse (see breadcrumb docs)

						#init breadcrumb
						bread = []
						if len(res.path.poses) > 0:
							rospy.loginfo("[%0.2f;%0.2f;%0.2f] => [%0.2f;%0.2f;%0.2f]",
										req.start.x,req.start.y,req.start.z,
										req.end.x,req.end.y,req.end.z)

							# Loop through the solution returned from breadcrumb
							for i in range(len(res.path_sparse.poses)):
								rospy.loginfo("    [%0.2f;%0.2f;%0.2f]",
											res.path_sparse.poses[i].position.x,
											res.path_sparse.poses[i].position.y,
											res.path_sparse.poses[i].position.z)
								bread.append([res.path_sparse.poses[i].position.x, res.path_sparse.poses[i].position.y, res.path_sparse.poses[i].position.z, 0.0])

							# Display the path
							# print(bread)
							self.breadcrumbWPS = bread
							self.display_path(bread,"/guidance/pathBreadcrum")
							self.breadcrumbMode = True
							self.breadcrumbWPSnextIndex = 0
							self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
							self.breadcrumbWPSnextIndex +=1 

						else:
							rospy.logerr("solution not found")
					else:
						if self.breadcrumbWPSnextIndex < (len(self.breadcrumbWPS)):
							# We got here a breadcrumb path, we should exuted down here:
							self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
							# Increment our waypoint counter
							self.breadcrumbWPSnextIndex +=1
						else:
							# If we finish with the breadcrumb waypoints we increase normal waypoints
							self.waypoint_counter += 1
							self.breadcrumbMode = False
				
				#else if the waypoint is finished but the payload is not dropped,
				# or the aruco marker is not yet detected, reset the waypoint counter.
				elif not ((self.waypoint_counter == (len(self.waypoints))) and (self.donot_int_for_bag) and (self.donot_int_for_person) and (self.land_refresh == False)):
					self.waypoint_counter = 1
				else:
					# Else the mission is over, shutdown and quit the node
					# XXX:	This could be used to restart the mission back to the
					#		first waypoint instead to restart the mission
					rospy.loginfo("All payload has been deployed, and the landing aruco marker has been detected.")
					rospy.loginfo("Mission complete, sending land")
					self.send_land()
					rospy.signal_shutdown("complete")

			elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
				rospy.loginfo("Mission cancelled!")
				rospy.signal_shutdown("cancelled")


	def display_path(self, wps, name):
		rospy.loginfo("Displaying path...")
		pub_path = rospy.Publisher(name, Path, queue_size=10, latch=True)
		msg = Path()
		msg.header.frame_id = "/map"
		msg.header.stamp = rospy.Time.now()
	
		for wp in wps:
			pose = PoseStamped()
			pose.pose.position.x = wp[0]
			pose.pose.position.y = wp[1]
			pose.pose.position.z = wp[2]
	
			pose.pose.orientation.w = 1.0
			pose.pose.orientation.x = 0.0
			pose.pose.orientation.y = 0.0
			pose.pose.orientation.z = 0.0
	
			msg.poses.append(pose)
		rospy.loginfo("Publishing path...")
		pub_path.publish(msg)


def main(args):
	# Initialise ROS
	rospy.init_node('guidance')

	# List of waypoints
	# [X, Y, Z, Yaw]
	# wps = [[-1.0, -1.0, 4.0, 0.0],
	# [-2.0, -1.5, 4.0, 0.0],
	# [-2.0, 1.5, 4.0, 0.0],
	# [-1.0, 1.5, 4.0, 0.0],
	# [-1.0, -1.5, 4.0, 0.0],
	# [ 0.0, -1.5, 4.0, 0.0],
	# [0.0, 1.5, 4.0, 0.0],
	# [1.4, 1.5, 4.0, 0.0],
	# [1.4, -1.5, 4.0, 0.0],
	# [2.0, -1.5, 4.0, 0.0],
	# [2.0, 1.5, 4.0, 0.0]]
	# # [3.0, 1.5, 4.0, 0.0],
	# # [3.0, -1.5, 4.0, 0.0],
	# # [4.0, -1.5, 4.0, 0.0],
	# # [4.0, 1.5,4.0, 0.0]]


	survey_height = 3.0

	wps = [[-1.0, -1.0, survey_height, 0.0],
	[2.0, -1.5, survey_height, 0.0],
	[2.0, 1.5, survey_height, 0.0],
	[1.0, 1.5, survey_height, 0.0],
	[1.0, -1.5, survey_height, 0.0],
	[0.0, -1.5, survey_height, 0.0],
	[0.0, 1.5, survey_height, 0.0],
	[-1.0, 1.5, survey_height, 0.0],
	[-1.0, -1.5, survey_height, 0.0],
	[-2.0, -1.5, survey_height, 0.0],
	[-2.0, 1.5, survey_height, 0.0]]

	guide = Guidance(wps)


	# Spin!
	rospy.spin()


if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('')
